name: Integrated CI/CD Pipeline

on:
  push:
    branches: [main, dev]
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - 'apps/crawling-lambda/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: '배포 대상 (frontend, backend, lambda, all)'
        required: true
        default: 'all'

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      lambda: ${{ steps.filter.outputs.lambda }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            backend:
              - 'apps/backend/**'
            lambda:
              - 'apps/crawling-lambda/**'

  deploy_frontend:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.frontend == 'true' || github.event.inputs.deploy_target == 'frontend' || github.event.inputs.deploy_target == 'all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
      
      - name: Build
        working-directory: apps/frontend
        run: npm run build
        env:
          REACT_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: Deploy to S3
        run: aws s3 sync apps/frontend/dist/ s3://${{ secrets.S3_BUCKET }} --delete
        
      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy_backend:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.backend == 'true' || github.event.inputs.deploy_target == 'backend' || github.event.inputs.deploy_target == 'all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_BACK }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_BACK }}
          aws-region: ap-northeast-2
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./apps/backend
          push: true
          tags: "${{ steps.login-ecr.outputs.registry }}/jobsync/backend:${{ github.sha }}"
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1) ECR 로그인 & 이미지 풀
            aws ecr get-login-password --region ap-northeast-2 \
              | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/jobsync/backend:${{ github.sha }}

            # 2) 배포 디렉토리 및 .env 준비
            mkdir -p ~/jobsync-backend/deploy && cd ~/jobsync-backend/deploy
            cat > .env << EOF
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            ELASTICSEARCH_NODE=${{ secrets.ELASTICSEARCH_NODE }}
            ELASTICSEARCH_USERNAME=${{ secrets.ELASTICSEARCH_USERNAME }}
            ELASTICSEARCH_PASSWORD=${{ secrets.ELASTICSEARCH_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}
            JWT_REFRESH_EXPIRATION_SECONDS=${{ secrets.JWT_REFRESH_EXPIRATION_SECONDS }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            IMAGE=${{ steps.login-ecr.outputs.registry }}/jobsync/backend:${{ github.sha }}
            EOF

            # 3) docker-compose.yml 작성
            cat > docker-compose.yml << 'EOF'
            version: '3'
            services:
              backend:
                container_name: jobsync-backend
                image: ${IMAGE}
                restart: always
                ports:
                  - "3000:3000"
                volumes:
                  - ./logs:/app/logs
                networks:
                  - app-network
            networks:
              app-network:
                driver: bridge
            EOF

            # 4) 배포·헬스체크·롤백
            bash -c "$(cat << 'EOFSCRIPT'
            if [ "$(docker ps -q -f name=jobsync-backend)" ]; then
              docker rename jobsync-backend jobsync-backend-old
              docker stop jobsync-backend-old
            fi
            docker-compose up -d
            for i in {1..10}; do
              if curl -s http://localhost:3000/search/test | grep -q "success"; then
                [ "$(docker ps -aq -f name=jobsync-backend-old)" ] \
                  && docker rm -f jobsync-backend-old
                echo "Deployment successful!" && exit 0
              fi
              sleep 3
            done
            echo "Health check failed, rolling back..." && \
            docker start jobsync-backend-old && exit 1
            EOFSCRIPT
            )"

  deploy_lambda:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.lambda == 'true' || github.event.inputs.deploy_target == 'lambda' || github.event.inputs.deploy_target == 'all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Package Scraping Lambda Function
        working-directory: apps/crawling-lambda/scraping_function
        run: |
          mkdir -p package
          docker run --rm -v "$PWD":/var/task public.ecr.aws/sam/build-python3.10 pip install -r requirements.txt -t package
          cp lambda_function.py package/
          cd package
          zip -r ../scraping_package.zip .
          cd ..
      
      - name: Deploy Scraping Lambda Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_LAMBDA }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_LAMBDA }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SCRAPING_FUNCTION_NAME: ${{ secrets.SCRAPING_FUNCTION_NAME }}
        run: |
          aws lambda update-function-code \
            --function-name $SCRAPING_FUNCTION_NAME \
            --zip-file fileb://apps/crawling-lambda/scraping_function/scraping_package.zip \
            --region $AWS_REGION

      - name: Package Refresh Lambda Function
        working-directory: apps/crawling-lambda/refresh_function
        run: |
          mkdir -p package
          docker run --rm -v "$PWD":/var/task public.ecr.aws/sam/build-python3.10 pip install -r requirements.txt -t package
          cp lambda_function.py package/
          cd package
          zip -r ../refresh_package.zip .
          cd ..
      
      - name: Deploy Refresh Lambda Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          REFRESH_FUNCTION_NAME: ${{ secrets.REFRESH_FUNCTION_NAME }}
        run: |
          aws lambda update-function-code \
            --function-name $REFRESH_FUNCTION_NAME \
            --zip-file fileb://apps/crawling-lambda/refresh_function/refresh_package.zip \
            --region $AWS_REGION